The SIMPLE (Single-particle IMage Processing Linux Engine) package is composed of a numerical fortran 95 engine compiled in a few binaries that can be found in SIMPLE/bin. These binaries are steered by perl-scripts to achieve high-level functionality. The perl library can be found in SIMPLE/lib and the executable perl scripts are in SIMPLE/apps. These perl scripts should be self-instructive, just execute them to get help and descriptions on how to use a combination of flags and command-line arguments. It is assumed that SIMPLE is placed in a “qsub” cluster environment and except for the included files it requires Spider version 17.X and a working Perl installation with the PDL (Perl Data Language) libraries and a few other CPAN modules installed. Check out cpan.org if something is missing. To set the necessary paths, execute the configure.pl script. Now all functionality will be available via SIMPLE/apps:     

1. refine_inplane.pl is based on a Perl interface to Spider with functionality including the very basic tasks of projection matching to achieve rotational alignment, MSA (Multivariate Statistical Analysis) for generation of class averages, which is done by compressing the data using PCA (Principal Component Analysis) and performing hierarchical clustering of projections in factor space.

2. het_master.pl, which is based on reference-free alignment in RAD, conformational state assignment by using a new phase consistency measure and randomized, greedy local search, followed by simultaneous refinement of orientations and state assignment in an orientation continuum. The reference-free alignment can be replaced by any other desired alignment by giving input Euler angles. This is however NOT recommended. The program tests which number of states give the best phase consistency, so the number of conformational states is no longer a fixed parameter but a variable that is iteratively optimized. This requires further explanation. Suppose that the data has been in-plane aligned using refine_inplane.pl  on a previously (somehow) established reconstruction. If no previous reconstruction is available, one has to resort to the much less attractive alternative of reference-free in-plane alignment, followed by classification. The output from refine_inplane.pl is a set of class-averages that should be masked before input to het_master.pl for alignment and heterogeneity analysis. The first output from  het_master.pl normally consists of a number of good reconstructions, possibly only differing in their relative rotational orientation, and one artificial volume (“the craposome”) to which non-fitting data have been assigned. The user should now carefully check if the good reconstructions are docked. If this is not the case, one reconstruction (the best scoring one, as described in the RESULT file) should be selected for additional rounds of in-plane alignment followed by heterogeneity analysis, until the presumably different conformational states are docked. Usually it is enough with one iteration to achieve docked reconstructions. Now, all reconstructions except the artificial one should be used for iterative refinement cycles of refine_inplane.pl followed by het_master.pl until the results are reproduced upon successive rounds, referring here to the number of states and score of the reconstructions. The converged reconstructions can then be used as a starting point for orientation refinement on individual particle images in partition_master.pl which is used to distribute Evol-Align jobs on the cluster. The theory behind evol-align is described in our most recent publication.

3. fixfstack.pl creates the Fourier stack required to run  partition_master.pl given a spider stack of real images.

4. partition_master.pl is used to distribute Evol-Align jobs of single or multiple volume(s) refinement. 

5. merge_algndocs.pl is for merging the aligndoc_* files from Evol-Align 

6. rec_master.pl is used to reconstruct volumes from a merged Evol-Align alignment document using Spider and the same spider stack of real images that was used to create the Fourier stack used for alignment. 

